// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  preferences   UserPreferences?
  prescriptions Prescription[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Custom Models for MedReminder App
model UserPreferences {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  morningTime   String   @default("08:00")
  afternoonTime String   @default("13:00")
  eveningTime   String   @default("20:00")
  allergies     String[] @default([]) @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Prescription {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  scanDate  DateTime   @default(now())
  ocrText   String?    @db.Text
  imageUrl  String?    @db.Text
  medicines Medicine[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Medicine {
  id             String       @id @default(cuid())
  prescriptionId String
  prescription   Prescription @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)
  nameOfMedicine String
  noOfTablets    Int
  whenToTake     Int[]        @default([]) // [morning, afternoon, evening] as 1 or 0
  notes          String?      @db.Text
  reminders      Reminder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reminder {
  id              String    @id @default(cuid())
  medicineId      String
  medicine        Medicine  @relation(fields: [medicineId], references: [id], onDelete: Cascade)
  googleEventId   String    @unique // Google Calendar Event ID
  scheduledTime   DateTime
  status          String    @default("pending") // "pending", "taken", "missed", "rescheduled"
  actualTakenTime DateTime?
  snoozeCount     Int       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
